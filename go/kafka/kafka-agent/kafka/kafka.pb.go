// Code generated by protoc-gen-go.
// source: kafka.proto
// DO NOT EDIT!

/*
Package kafka is a generated protocol buffer package.

It is generated from these files:

	kafka.proto

It has these top-level messages:

	Request
	Reply
*/
package kafka

import (
	proto "github.com/golang/protobuf/proto"
)
import (
	fmt "fmt"
)
import (
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type Request struct {
	Topic     string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Key       []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Partition int32  `protobuf:"varint,4,opt,name=partition" json:"partition,omitempty"`
	Logid     string `protobuf:"bytes,5,opt,name=logid" json:"logid,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The response message containing the greetings
type Reply struct {
	Partition int32  `protobuf:"varint,1,opt,name=partition" json:"partition,omitempty"`
	Offset    int64  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Errno     int32  `protobuf:"varint,3,opt,name=errno" json:"errno,omitempty"`
	Error     string `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Request)(nil), "kafka.Request")
	proto.RegisterType((*Reply)(nil), "kafka.Reply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Agent service

type AgentClient interface {
	// Sends a greeting
	Send(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type agentClient struct {
	cc *grpc.ClientConn
}

func NewAgentClient(cc *grpc.ClientConn) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) Send(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/kafka.Agent/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Agent service

type AgentServer interface {
	// Sends a greeting
	Send(context.Context, *Request) (*Reply, error)
}

func RegisterAgentServer(s *grpc.Server, srv AgentServer) {
	s.RegisterService(&_Agent_serviceDesc, srv)
}

func _Agent_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.Agent/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Send(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Agent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kafka.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Agent_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("kafka.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x90, 0x51, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0xad, 0xdd, 0xac, 0x74, 0x5c, 0x64, 0x09, 0x22, 0x41, 0x7c, 0x90, 0x3e, 0x88, 0x4f,
	0x15, 0xf4, 0x04, 0x7a, 0x84, 0xf1, 0x04, 0x71, 0x77, 0x5a, 0x42, 0x6b, 0x26, 0xa6, 0x59, 0xb1,
	0x78, 0x79, 0x9b, 0xa4, 0x28, 0xee, 0x5b, 0xbe, 0x3f, 0xf9, 0x87, 0x2f, 0x03, 0xe7, 0xbd, 0x6e,
	0x7b, 0xdd, 0x38, 0xcf, 0x81, 0xa5, 0x48, 0x50, 0x7f, 0xc3, 0x19, 0xd2, 0xc7, 0x81, 0xc6, 0x20,
	0x2f, 0x41, 0x04, 0x76, 0x66, 0xa7, 0x8a, 0xdb, 0xe2, 0xbe, 0xc2, 0x0c, 0x72, 0x0b, 0x65, 0x4f,
	0x93, 0x3a, 0x9d, 0xb3, 0x0d, 0xc6, 0x63, 0x7c, 0xf7, 0xa9, 0x87, 0x03, 0xa9, 0x32, 0x65, 0x19,
	0xe4, 0x0d, 0x54, 0x4e, 0xfb, 0x60, 0x82, 0x61, 0xab, 0x56, 0xf3, 0x8d, 0xc0, 0xbf, 0x20, 0x76,
	0x06, 0xee, 0xcc, 0x5e, 0x89, 0x3c, 0x3b, 0x41, 0x6d, 0x40, 0x20, 0xb9, 0x61, 0xfa, 0x5f, 0x2e,
	0x8e, 0xcb, 0x57, 0xb0, 0xe6, 0xb6, 0x1d, 0x29, 0x24, 0x8b, 0x12, 0x17, 0x8a, 0x43, 0xc9, 0x7b,
	0xcb, 0x49, 0x44, 0x60, 0x86, 0x25, 0x65, 0x9f, 0x24, 0x2a, 0xcc, 0xf0, 0xf8, 0x00, 0xe2, 0xb9,
	0x23, 0x1b, 0xe4, 0x1d, 0xac, 0x5e, 0xc9, 0xee, 0xe5, 0x45, 0x93, 0xb7, 0xb1, 0xfc, 0xfe, 0x7a,
	0xf3, 0xcb, 0xb3, 0x50, 0x7d, 0xf2, 0x22, 0x61, 0x6b, 0xb8, 0xe9, 0xbc, 0xdb, 0x35, 0xf4, 0xa5,
	0xdf, 0xdd, 0x40, 0xe3, 0xdb, 0x3a, 0xad, 0xee, 0xe9, 0x27, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x04,
	0xc1, 0x6d, 0x49, 0x01, 0x00, 0x00,
}
